trigger:
- master
name: $(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Build
  jobs:

  - job: 'django_basic'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 1

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: |
        python -m pip install --upgrade pip
        pip install -r django-basic/requirements.txt
      displayName: 'Install dependencies'

    - script: |
        pip install pytest-django
        cd django-basic/azuredemo
        pytest --junitxml=../../reports/django-basic.xml
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'reports/django-basic.xml'
        testRunTitle: '$(Agent.JobName)'
      condition: succeededOrFailed()

  - job: 'django_multi_environment'
    strategy:
      matrix:
        Python36_Django213:
          python.version: '3.6'
          django.version: '2.1.3'
        Python37_Django213:
          python.version: '3.7'
          django.version: '2.1.3'
        Python37_Django214:
          python.version: '3.7'
          django.version: '2.1.4'
      maxParallel: 3

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: |
        python -m pip install --upgrade pip
        pip install django==$(django.version)
      displayName: 'Install dependencies'

    - script: |
        pip install pytest-django
        cd django-multi-environment/azuredemo
        pytest --junitxml=../../reports/django-multi-environment.xml
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'reports/django-multi-environment.xml'
        testRunTitle: '$(Agent.JobName)'
      condition: succeededOrFailed()

- stage: Test
  dependsOn: []
  jobs:
  - job: 'flask_basic'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 2

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: |
        python -m pip install --upgrade pip
        cd flask-basic
        pip install '.[test]'
      displayName: 'Install dependencies'

    - script: |
        pip install pytest
        cd flask-basic
        pytest --junitxml=../reports/flask-basic.xml
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'reports/flask-basic.xml'
        testRunTitle: '$(Agent.JobName)'
      condition: succeededOrFailed()

  - job: 'flask_basic_with_coverage'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 2

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: |
        python -m pip install --upgrade pip
        cd flask-basic
        pip install '.[test]'
      displayName: 'Install dependencies'

    - script: |
        pip install pytest coverage
        cd flask-basic
        coverage run -m pytest --junitxml=../reports/flask-basic-coverage.xml
        coverage report
      displayName: 'Run tests and coverage'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'reports/flask-basic-coverage.xml'
        testRunTitle: '$(Agent.JobName)'
      condition: succeededOrFailed()

- stage: Deploy
  dependsOn: []
  jobs:
  - job: 'library_basic'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 2

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: |
        python -m pip install --upgrade pip
        pip install -r library-basic/requirements.txt
        cd library-basic
        pip install -e .
      displayName: 'Install dependencies'

    - script: |
        cd library-basic
        pytest --junitxml=../reports/library-basic.xml
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'reports/library-basic.xml'
        testRunTitle: '$(Agent.JobName)'
      condition: succeededOrFailed()

    - script: |
        cd library-basic
        python setup.py sdist bdist_wheel
      displayName: 'Run tests'

    - task: CopyFiles@2
      inputs:
        contents: library-basic/dist/**
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: Library_Basic_Wheel
  - job: 'server'
    dependsOn: 'library_basic'
    pool: server
    steps:
      - task: Delay@1
        inputs:
          delayForMinutes: '0'
      - task: ServiceNow-DevOps-Server-Change-Acceleration@1
        inputs:
          connectedServiceName: 'devopsdev3_Mohan'
        
- stage: prod
  dependsOn: []
  jobs:
  - job: 'library_flit'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 2

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - script: |
        python -m pip install --upgrade pip
        pip install pytest flit mock codecov pydocstyle pytest-cov
        cd library-flit
        flit install
      displayName: 'Install dependencies'
    
    - script: |
        cd library-flit
        python -m pytest tests/ --junitxml=../reports/library-flit.xml --cov=demolib
        codecov
      displayName: 'pytest'
      env:
        CODECOV_TOKEN: '<CODECOV.IO TOKEN'
    
    - script: pydocstyle --ignore=D301,D212,D203 library-flit/demolib
      displayName: 'pydocstyle'

    - script: |
        cd library-flit
        sed 's/.dev/.dev$(Build.BuildNumber)/g' demolib/__init__.py
        flit build
      displayName: 'Build wheel'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'reports/library-flit.xml'
        testRunTitle: '$(Agent.JobName)'
      condition: succeededOrFailed()
    
    - task: CopyFiles@2
      inputs:
        contents: library-flit/dist/**
        targetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: Library_Flit_Wheel


  - job: 'install_library'
    dependsOn: 'library_flit'
    strategy:
      matrix:
        Python36:
          python.version: '3.6'
        Python37:
          python.version: '3.7'
      maxParallel: 2

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Library_Flit_Wheel'
        itemPattern: '**'
        downloadPath: '$(System.ArtifactsDirectory)' 
    - script: |
        python -m pip install --upgrade pip
        find $(System.ArtifactsDirectory)/Library_Flit_Wheel/library-flit/dist/*.whl | xargs pip install
      displayName: 'Install package'
